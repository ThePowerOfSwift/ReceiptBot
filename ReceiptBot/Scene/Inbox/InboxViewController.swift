//
//  InboxViewController.swift
//  ReceiptBot
//
//  Created by Haik Ampardjian on 4/5/17.
//  Copyright (c) 2017 receiptbot. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import ActionSheetPicker_3_0
import XLPagerTabStrip

protocol InboxViewControllerOutput {
    var selectedInvoice: SyncConvertedInvoiceResponse! { get set }
//    func fetchInbox(request: Inbox.DataSource.Request)
}

class InboxViewController: UIViewController, Spinnable {
    private var dataSource: InboxDataSource!
    
    var output: InboxViewControllerOutput!
    var router: InboxRouter!

    @IBOutlet weak var filter: UIButton!
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: - IBActions
    
    @IBAction func pickFilter(_ sender: UIButton) {
        let picker = ActionSheetStringPicker(title: "Pick the filter",
                                             rows: InboxFilterType.allValues,
                                             initialSelection: 0,
                                             doneBlock: { [weak self] (_, _, value) in
                                                let title = value as! String
                                                DispatchQueue.main.async { self?.filter(with: title) }
                                            },
                                             cancel: nil,
                                             origin: self.view)
        
        picker?.show()
    }
    
    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        InboxConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
    }

    // MARK: - Event handling
    
    func setupTableView() {
        tableView.register(InboxCell.nib, forCellReuseIdentifier: InboxCell.cellId)
        
        dataSource = InboxDataSource()
        dataSource.vcOutput = self
        tableView.dataSource = dataSource
        tableView.delegate = dataSource
    }
    
    func filter(with query: String) {
        filter.setTitle(query, for: .normal)
        dataSource.filterModel(with: query)
    }

    // MARK: - Display logic

    func displaySomething(viewModel: Inbox) {
        // NOTE: Display the result from the Presenter

        // nameTextField.text = viewModel.name
    }
}

extension InboxViewController: InboxDataSourceVCOutput {
    func finishUpdatingTableView() {
        stopSpinning()
        tableView.reloadData()
    }
    
    func startUpdatingTableView() {
        startSpinning()
    }
    
    func didSelect(the invoice: SyncConvertedInvoiceResponse) {
        output.selectedInvoice = invoice
        router.navigateToDetails()
    }
}

extension InboxViewController: IndicatorInfoProvider {
    func indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo {
        return IndicatorInfo(title: " Inbox  ")
    }
}
